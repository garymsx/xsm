// 文字出力サブルーチン
import "/lang/mul.xsm";
import "/lang/mulw.xsm";
import "/lang/div.xsm";
import "/lang/divw.xsm";

// システムコール
//const int SYSTEM_CALL = 0x0005;

// システムコール 1文字出力
function SC_PUTCH(e, c = 0x02) = 0x0005;

// HLレジスタが指すアドレスの文字列をコンソールに表示
// 終了文字は"\0"
function print(de) {
    using(af,bc,hl) {
        while() {  // ()で無限ループ
            a = *de;
            if(a == 0) break;
            using(de) {
                // 改行コードは \r も一緒に出力する
                if(a == '\n') putch('\r');
                putch(a);
            }
            de++;
            a = *de;
        }
    }
}

// 1文字出力
function putch(e) {
    using(af,bc,de,hl) {
    	SC_PUTCH(e);
    }
}

// 改行
function cr() {
    using(de) {
        print("\n");
    }
}

// HLレジスタの内容を10進数出力する
function printNum(hl) {
    using(af,bc,de,hl,ix) {
        // 表示バッファ
        byte[6] buf;
        // バッファ初期化
        ix = buf;
        ix[0] = ' ';
        ix[1] = ' ';
        ix[2] = ' ';
        ix[3] = ' ';
        ix[4] = ' ';
        ix[5] = '\0'; // 終了文字
        de = &buf[4];  // bufの後ろから文字で埋めていく

        for(a = 0;a < 5;a++) {
            push af,de;
            div8(hl,10);       // 商と余り両方使いたいので"/=" や "%="" は 使わない
            pop de;
            a = l;             // 余りは必ず8bitに収まるのでHは捨ててよい
            hl = bc;           // div8の商はbcに入っている
            a += '0';          // 余りを文字化する
            *de = a;
            pop af;            // スタックが合わなくなるので break前にpopしておく
            if(hl == 0) break; // 0になったら打ち切り
            de--;              // 前方へ戻っていく
        }

        // 左詰めしたい場合
        //print(de);
        // 右詰め表示
        print(buf);
        return;
    }
}
