import "/lang/mul.xsm";
import "/lang/mulw.xsm";
import "/lang/div.xsm";
import "/lang/divw.xsm";

import "/msx/workarea.xsm";
import "/msx/bios.xsm";
import "/msx/extbios.xsm";

// TODO:ROM化するとマップが化ける
// org 0x4000;
// org 0xC000,shadow;
// dc @"AB";
// dw main,0,0,0;
// db 0,0,0,0,0,0;

const byte BLOCK_SIZE = 16;                // 16x16で分割 32にすると圧縮率が多少よくなるがZ80だと遅い
const byte SPLIT_SIZE = 256 / BLOCK_SIZE;  // 256x256を16x16で分割するので16

// RLE圧縮リソース
byte[] tmpFont   = from("dq3font.bmp"  , sc2     , rle);
byte[] tmpSprite = from("dq3sprite.bmp", sp16    , rle);
byte[] tmpTile   = from("dq3tile.tmx"  , tmxmap2 , rle);
byte[] tmpMap    = from("dq3map.tmx"   , tmxmap  , dicrle, BLOCK_SIZE, BLOCK_SIZE);
byte[15510] dummy;

// 各種リソース
shadow byte[8*256*2]  font;    // キャラクタ(8byte) * 256 + 色データ(8byte) * 256
shadow byte[3*32+3]   sprite;  // スプライト枚数 + 枚数分の色データ
shadow byte[64][4]    tile;

function main() {
    // RLEデータ展開
    UNRLE(HL = font  , DE = tmpFont);
    UNRLE(HL = sprite, DE = tmpSprite);
    UNRLE(HL = tile  , DE = tmpTile);

    // SCREEN 1
    EXT_CHGMDP(A = 1);
    let FORCLR = 15;
    let BAKCLR = 0;
    let BDRCLR = 0;
    EXT_CHGCLR(A = 1);
    SETGRP();
    CLRSPR();

    // ポート番号を取得
    VDP_INIT();

    unsafe {
        di;

        // 16x16スプライトモードにする
        let A = RG1SAV | 0b10;
        VDP(0x80 + 0x1, E = A);  // 上位bit 10 + レジスタ番号

        // PCG読み込み
        LOAD_PATTERN(font                       , sizeof(font)   - 0x800);
        LOAD_COLOR  (font + sizeof(font) - 0x800, 0x800);

        // スプライト読み込み
        LOAD_SPRITE(sprite, sizeof(sprite) - 3);

        // スプライト表示
        B = sprite[96]; // スプライトの色
        PUT_SPRITE(0, B, 112, 95);
        B = sprite[97];
        PUT_SPRITE(1, B, 112, 95);
        B = sprite[98];
        PUT_SPRITE(2, B, 112, 95);
        ei;

        // WAIT SPACE KEY
        shadow byte x;
        shadow byte y;
        x = 162;
        y = 207;

        // WAIT
        INIT_MAP();
        SET_MAPBUF(x,y);
        VIEW_MAPBUF(2,2);
        do {
            // 画面表示
            // SET_MAPBUF(x,y);
            VSYNC(B = 1);
            VIEW_MAPBUF(2,2);
            A = GTSTCK(A = 0); // カーソルキーの状態
            switch(A) {
                case(1) {
                    if(y >  0) {
                        y--;
                        // スクロールの中間表示
                        VSYNC(B = 5);
                        VIEW_MAPBUF(2,1);
                        SCROLL_UP(x,y);
                    }
                }
                case(3) {
                    if(x < 254) {
                        x++;
                        VSYNC(B = 5);
                        VIEW_MAPBUF(3,2);
                        SCROLL_RIGHT(x,y);
                    }
                }
                case(5) {
                    if(y < 254) {
                        y++;
                        VSYNC(B = 5);
                        VIEW_MAPBUF(2,3);
                        SCROLL_DOWN(x,y);
                    }
                }
                case(7) {
                    if(x >  0) {
                        x--;
                        VSYNC(B = 5);
                        VIEW_MAPBUF(1,2);
                        SCROLL_LEFT(x,y);
                    }
                }
            }

            A = GTTRIG(A = 0); // スペースキーで終了

        } while(A == 0);

        // SCREEN 0
        EXT_CHGMDP(A = 0);
        KILBUF();
    }
}

function VSYNC(B = 1) {
    ei;
    // 垂直同期待ち
    loop(B) {
        halt;
    }
}

// 2x2のタイルデータを使ってマップを展開するバッファ
// 画面サイズ(32*24) + 周囲にスクロール用のバッファ
shadow byte[24 + 4][32 + 4] mapBuf;  

/**
 * マップデータをマップバッファに展開する
 * @param vx - 表示するX座標
 * @param vx - 表示するX座標
 */
function SET_MAPBUF(shadow byte vx, shadow byte vy) {
    shadow byte x;
    shadow byte y;

    // mapBufに展開
    unsafe(DE) {
        for(y = 0; y < 14; y++) {
            for(x = 0; x < 18; x++) {
                shadow byte tileNo;
                let B = vx + x;
                let C = vy + y;
                tileNo = GET_TILE(B, C);
                SET_TILE(x, y, tileNo);
            }
        }
    }
}

function SCROLL_LEFT(shadow byte vx, shadow byte vy) {
    shadow byte y;

    unsafe(DE) {
        HL = &mapBuf[27][33]; // 転送元
        DE = &mapBuf[27][35]; // 転送先
        BC = sizeof(mapBuf) - 2;
        lddr;

        for(y = 0; y < 14; y++) {
            shadow byte tileNo;
            let B = vx;
            let C = vy + y;
            tileNo = GET_TILE(B, C);
            SET_TILE(0, y, tileNo);
        }
    }
}

function SCROLL_RIGHT(shadow byte vx, shadow byte vy) {
    shadow byte y;

    unsafe(DE) {
        HL = &mapBuf[0][2]; // 転送元
        DE = &mapBuf[0][0]; // 転送先
        BC = sizeof(mapBuf) - 2;
        ldir;

        for(y = 0; y < 14; y++) {
            shadow byte tileNo;
            let B = vx + 17;
            let C = vy + y;
            tileNo = GET_TILE(B, C);
            SET_TILE(17, y, tileNo);
        }
    }
}

function SCROLL_UP(shadow byte vx, shadow byte vy) {
    shadow byte x;

    unsafe(DE) {
        HL = &mapBuf[25][35]; // 転送元
        DE = &mapBuf[27][35]; // 転送先
        BC = sizeof(mapBuf) - sizeof(mapBuf[0]) * 2;
        lddr;

        for(x = 0; x < 18; x++) {
            shadow byte tileNo;
            let B = vx + x;
            let C = vy;
            tileNo = GET_TILE(B, C);
            SET_TILE(x, 0, tileNo);
        }
    }
}

function SCROLL_DOWN(shadow byte vx, shadow byte vy) {
    shadow byte x;

    unsafe(DE) {
        HL = &mapBuf[2]; // 転送元
        DE = &mapBuf[0]; // 転送先
        BC = sizeof(mapBuf) - sizeof(mapBuf[0]) * 2;
        ldir;

        for(x = 0; x < 18; x++) {
            shadow byte tileNo;
            let B = vx + x;
            let C = vy + 13;
            tileNo = GET_TILE(B, C);
            SET_TILE(x, 13, tileNo);
        }
    }
}

/**
 * バッファ(x,y)にタイルをセット
 * @param x
 * @param y
 */
function SET_TILE(shadow byte x, shadow byte y, shadow byte tileNo) {
    // マップからタイル番号を取り出して、タイルテーブルの先頭アドレスを求める
    let BC = &tile[tileNo];
    let HL = &mapBuf[y * 2][x * 2];

    // 表示バッファに2x2ずつ埋めていく
    let *HL = *BC;HL++;  BC++;
    let *HL = *BC;HL+=35;BC++;
    let *HL = *BC;HL++;  BC++;
    let *HL = *BC;
}

function VIEW_MAPBUF(shadow byte vx, shadow byte vy) {
    // mapBufを表示
    di;
    let HL = &mapBuf[vy][vx];

    for(A = 0; A < 24; A++) {
        LOCATE(0,A);
        PRINT(HL, 32);
        HL += 36;
    }
    ei;
}

// VDPポート番号
shadow byte VDP_R0; // VRAM読み込み用
shadow byte VDP_W0; // VRAM書き込み用
shadow byte VDP_R1;
shadow byte VDP_W1; // レジスタ書き込み用
shadow byte VDP_R2;
shadow byte VDP_W3;

function VDP_INIT() {
    // MAIN ROMからVDPのポート番号を取得し保存
    A = RDSLT(A = EXPTBL[0], HL = &VDP_DR);
    VDP_R0 = A;
    A++;
    VDP_R1 = A;
    A++;
    VDP_R2 = A;

    A = RDSLT(A = EXPTBL[0], HL = &VDP_DW);
    VDP_W0 = A;
    A++;
    VDP_W1 = A;
    A++;A++;
    VDP_W3 = A;
}

/**
 * VDPへ書き込み
 * @param D レジスタ番号
 * @param E 書き込むデータ
 * @remark VDPアクセス中は割り込み禁止すること
 */
function VDP(D,E) using A, C {
    A = VDP_W1;
    C = A;
    out *C, E;
    out *C, D;
}

/**
 * 連続したVRAMへの書き込み開始宣言
 * @type MSX
 * @param HL レジスタ番号
 * @return C VRAM書き込み用のポート番号を返す
 * @using A,D,E
 * @remark
 *   VDPアクセス中は割り込み禁止すること
 *   CLOSEはない
 */
function START_VPOKE(HL) return C using A,D,E {
    // bit14-16のセット
    VDP(D = 14 + 0x80, 0); // SCREEN1だと意味がなさそうなのだけど一応

    // bit0-7のセット
    A = VDP_W1;
    C = A;
    out *C,L;

    // bit8-13を書き込みモードでセット
    A = H;
    A &= 0x3f; //  bit6-7を00でクリア
    A |= 0x40; //  bit6-7に01をセット
    out *C,A;

    // VRAM書き込み用ポート
    A = VDP_W0;
    C = A;

    return C;
}

/**
 * START_VPOKEしたアドレスへ書き込む
 * @type MSX
 * @param value 書き込むデータ
 * @remark
 *   わかり易くするためにinline化しただけ。
 *   Cレジスタはポート番号が設定済みであること。
 *   VDPアクセス中は割り込み禁止すること。
 */
inline VPOKE(value) {
    out *C, value;
}

/**
 * 文字を指定座標から出力出来る準備をする
 * @param B X座標
 * @param C Y座標
 */
function LOCATE(B,C) {
    using(AF, HL) {
        unsafe {
            let HL = C * 32 + B + 0x1800;
            START_VPOKE(HL);
        }
    }
}

/**
 * LOCATEで指定した座標に文字列を出力する
 * @param HL 文字列へのアドレス
 * @param B  文字列の長さ(255バイトまで)
 */
function PRINT(HL, B) {
    using(AF,HL) {
        loop(B) {
            A = *HL;
            VPOKE(A);
            HL++;
        }
    }
}

/**
 * パターンデータを設定する
 * @param DE パターンデータのアドレス
 * @param BC 読み込むサイズ
 * @using AF,BC,DE,HL
 */
function LOAD_PATTERN(DE, BC) using AF,BC,DE,HL {
    MEM_TO_VRAM(HL =      0, DE, BC);
    MEM_TO_VRAM(HL = 0x0800, DE, BC);
    MEM_TO_VRAM(HL = 0x1000, DE, BC);
}

/**
 * カラーテーブルを設定する
 * @param DE パターンデータのアドレス
 * @param BC 読み込むサイズ
 * @using AF,BC,DE,HL
 */
function LOAD_COLOR(DE, BC) using AF,BC,DE,HL {
    MEM_TO_VRAM(HL = 0x2000, DE, BC);
    MEM_TO_VRAM(HL = 0x2800, DE, BC);
    MEM_TO_VRAM(HL = 0x3000, DE, BC);
}

/**
 * スプライトを設定する
 * @param DE スプライトデータのアドレス
 * @param BC 読み込むサイズ
 * @using AF,BC,DE,HL
 */
function LOAD_SPRITE(DE, BC) using AF,BC,DE,HL {
    MEM_TO_VRAM(HL = 0x3800, DE, BC);
}

/**
 * スプライトを表示する
 * @param A = スプライト番号
 * @param B = 色コード
 * @param D = X
 * @param E = Y
 */
function PUT_SPRITE(A,B,D,E) using AF,BC,DE,HL {
    using(AF,BC,DE,HL) {
        unsafe {
            HL = A;
            HL << 2;
            HL += 0x1b00;
            using(AF,DE) {
                START_VPOKE(HL);
            }
            VPOKE(E); // X
            VPOKE(D); // Y
            A << 2;   // 16x16モードの時はスプライト番号を4倍しなければならない
            VPOKE(A); // スプライト番号
            VPOKE(B); // 色
        }
    }
}

/**
 * VRAMにメモリを転送する
 * @param HL VRAMアドレス
 * @param DE メモリアドレス
 * @param BC 転送サイズ
 */
function MEM_TO_VRAM(HL, DE, BC) {
    using(AF,BC,DE,HL) {
        using(BC,DE) {
            START_VPOKE(HL);
        }

        unsafe {
            HL = BC;
            C  = VDP_W0;
            do {
                A = *DE;
                VPOKE(A);
                DE++;
                HL--;
            } while(HL != 0)
        }
    }
}

/**
 * RLE圧縮を展開する(PackBits)
 * @param HL 展開先アドレス
 * @param DE RLE元データ
 */
function UNRLE(HL, DE) {
    while() {
        A = *DE; // データ長
        DE++;
        if((+)A > 0) {
            // 同じ値が連続する場合
            B = A;
            A = *DE;
            DE++;
            loop(B) {
                *HL = A;
                HL++;
            }
        } else if((+)A < 0) {
            // 値が連続しない場合
            neg A;
            B = A;
            loop(B) {
                A = *DE;
                DE++;
                *HL = A;
                HL++;
            }
        } else {
            // データ長が0なので終了する
            break;
        }
    }
}

shadow int  mapDic;   // 辞書データの開始アドレス
shadow byte startx;   // ブロック開始X座標
shadow byte starty;   // ブロック開始Y座標
shadow byte endx;     // ブロック終了X座標
shadow byte endy;     // ブロック終了Y座標
shadow int  startrle; // ブロック開始アドレス
shadow int  blockNo;  // 展開中のブロック番号
shadow int  rle;      // 展開中のRLEアドレス

function INIT_MAP() {
    // 辞書のアドレスを特定しておく
    let mapDic = SPLIT_SIZE * SPLIT_SIZE * 2 + tmpMap;
    // ブロック番号をリセット
    let blockNo = 0xffff;
}

/**
 * RLE2圧縮したマップデータからタイル番号を取得する
 * @param x
 * @param y
 * @return A 取得したタイル番号
 */
function GET_TILE(shadow byte x, shadow byte y) return A {
    let B = x / BLOCK_SIZE;  // offsetテーブルX座標
    let C = y / BLOCK_SIZE;  // offsetテーブルY座標

    // RLEテーブルから先頭アドレスを求める
    let C = C * SPLIT_SIZE + B;             // ブロック番号を特定
    B = 0;                                  // Cレジスタ値の16bit拡張

    unsafe {
        // 前回と同じブロック番号の場合初期設定を省略
        if(BC != blockNo) {
            let startrle = *(C * 2 + tmpMap) + tmpMap; // 指定されたX,Yを含むマップのブロック先頭アドレス
            // ブロック先頭座標を求める(BLOCK_SIZEの倍数にまるめる)
            if(BLOCK_SIZE == 16) { // 確定条件式の為、実際には分岐処理は展開されない
                let startx = x & 0b11110000;
                let starty = y & 0b11110000;
            } else if(BLOCK_SIZE == 32) {
                let startx = x & 0b11100000;
                let starty = y & 0b11100000;
            } else {
                // 16,32以外の分割はNG
            }
            let endx = startx + BLOCK_SIZE;   // ブロック終了X座標
            let endy = starty + BLOCK_SIZE;   // ブロック終了Y座標
            let blockNo = BC;
        }

        let rle = startrle;
        let D = startx;
        let E = starty;
        while() {
            let A = *rle; // データ長
            rle++;
            if((+)A > 0) {
                loop(A) {
                    let H = x;
                    let L = y;
                    // ターゲット座標到達
                    // HL == DEとしたかったが遅い
                    if(D == H && E == L) {
                        A = GET_DIC_TILE(0);
                        return A;
                    }
                    D++;

                    if(D == H && E == L) {
                        A = GET_DIC_TILE(1);
                        return A;
                    }
                    D--;E++;

                    if(D == H && E == L) {
                        A = GET_DIC_TILE(2);
                        return A;
                    }
                    D++;

                    if(D == H && E == L) {
                        A = GET_DIC_TILE(3);
                        return A;
                    }

                    D++;E--;
                    if(D == endx) {
                        D = startx;
                        E++;E++;
                    }
                }
                HL = rle;
                A = *HL;
                // A <= 254は辞書参照なので1バイト進める
                // A = 255は続く4バイトがタイルデータなので+5バイト進める
                if(A != 255) {
                    HL++;
                } else {
                    HL += 5;
                }
                rle = HL;
            } else if((+)A < 0) {
                neg A;
                // 値が連続しない場合
                loop(A) {
                    let H = x;
                    let L = y;
                    // ターゲット座標到達
                    // (x,y) (x + 1,y) (x,y + 1) (x + 1,y + 1)の順に判定していく
                    if(D == H && E == L) {
                        A = GET_DIC_TILE(0);
                        return A;
                    }
                    D++;

                    if(D == H && E == L) {
                        A = GET_DIC_TILE(1);
                        return A;
                    }
                    D--;E++;

                    if(D == H && E == L) {
                        A = GET_DIC_TILE(2);
                        return A;
                    }
                    D++;

                    if(D == H && E == L) {
                        A = GET_DIC_TILE(3);
                        return A;
                    }
                    D++;E--;

                    if(D == endx) {
                        D = startx;
                        E++;E++;
                    }

                    HL = rle;
                    A = *HL;
                    // A <= 254は辞書参照なので1バイト進める
                    // A = 255は続く4バイトがタイルデータなので+5バイト進める
                    if(A != 255) {
                        HL++;
                    } else {
                        HL += 5;
                    }
                    rle = HL;
                }
            } else {
                break; // 長さデータ = 0の時だが、長さデータ0は作成されない
            }
        }
        return 0;
    }
}

/**
 * 辞書テーブルからタイルを取得する
 * @param C  - タイル位置 0-(0,0) 1-(1,0) 2-(0,1) 3-(1,1)
 * @returns A - タイル
 */
function GET_DIC_TILE(C) return A {

    using(BC, DE, HL) {
        unsafe {
            let HL = rle;
            let A = *HL;

            // 辞書データの場合
            if(A != 255) {
                // 辞書A番を取り出す
                let HL = mapDic + A * 4; // 辞書先頭アドレス
            } else {
                // 辞書がないので続く４バイトがタイルデータ
                HL++;
            }

            for(A = 0;A < 4;A++) {
                if(A == C) return *HL;
                HL++;
            }

        }
    }
    
}
