import "/msx/workarea.xsm";
import "/msx/bios.xsm";
import "/msx/extbios.xsm";

// ポート番号を取得
VDP_INIT();

// SCREEN 1
EXT_CHGMDP(A = 1);

unsafe {
    for(B = 'A'; B <= 'Z'; B++) {
        di;
        // 書き込み開始宣言
        START_VPOKE(HL = 0x1800);

        // VRAMに書き込み
        HL = 32 * 24;
        @ {
            VPOKE(B);
            HL--;
            if(HL != 0) continue;
        }
        ei;
    }

}

// WAIT KEY INPUT
CHGET();

// SCREEN 0
EXT_CHGMDP(A = 0);

return;

// VDPポート番号
byte VDP_R0;
byte VDP_W0;
byte VDP_R1;
byte VDP_W1;
byte VDP_R2;
byte VDP_W3;

function VDP_INIT() {
    // MAIN ROMからVDPのポート番号を取得し保存
    A = RDSLT(A = EXPTBL[0], HL = &VDP_DR);
    VDP_R0 = A;
    A++;
    VDP_R1 = A;
    A++;
    VDP_R2 = A;

    A = RDSLT(A = EXPTBL[0], HL = &VDP_DW);
    VDP_W0 = A;
    A++;
    VDP_W1 = A;
    A++;A++;
    VDP_W3 = A;
}

/**
 * VDPへ書き込み
 * @param D レジスタ番号
 * @param E 書き込むデータ
 * @remark VDPアクセス中は割り込み禁止すること
 */
function VDP(D,E) using A, C {
    A = VDP_W1;
    C = A;
    out *C, E;
    out *C, D;
}

/**
 * 連続したVRAMへの書き込み開始宣言
 * @type MSX
 * @param HL レジスタ番号
 * @return C VRAM書き込み用のポート番号を返す
 * @using A,D,E
 * @remark
 *   VDPアクセス中は割り込み禁止すること
 *   CLOSEはない
 */
function START_VPOKE(HL) return C using A,D,E {
    // bit14-16のセット
    VDP(D = 14 + 0x80, 0); // SCREEN1だと意味がなさそうなのだけど一応

    // bit0-7のセット
    A = VDP_W1;
    C = A;
    out *C,L;

    // bit8-13を書き込みモードでセット
    A = H;
    A &= 0x3f; //  bit6-7を00でクリア
    A |= 0x40; //  bit6-7に01をセット
    out *C,A;

    // VRAM書き込み用ポート
    A = VDP_W0;
    C = A;

    return C;
}

/**
 * START_VPOKEしたアドレスへ書き込む
 * @type MSX
 * @param value 書き込むデータ
 * @remark
 *   わかり易くするためにinline化しただけ。
 *   Cレジスタはポート番号が設定済みであること。
 *   VDPアクセス中は割り込み禁止すること。
 */
inline VPOKE(value) {
    out *C, value;
}
